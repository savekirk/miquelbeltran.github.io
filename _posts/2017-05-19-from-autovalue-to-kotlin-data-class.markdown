---
title: "From AutoValue to Kotlin data class"
layout: post
date: 2017-05-19 17:00
image: /assets/images/refactor-viewmodel.png
headerImage: false
tag:
- android
- kotlin
category: blog
author: miquel
description: Tips when migrating from AutoValue to Kotlin data classes
---
<p name="4a75" id="4a75" class="graf graf--p graf-after--h3">In our attempt to slowly migrate our codebase to Kotlin (we are at 40% at the time of this article), one of the biggest roadblocks we got was migrating our data model.</p><p name="844e" id="844e" class="graf graf--p graf-after--p">This data model was composed by roughly 30 Java classes using AutoValue and some AutoValue extensions like auto-value-parcel or auto-value-with.</p><p name="3bc4" id="3bc4" class="graf graf--p graf-after--p">Kotlin data class seemed like a good choice: Built in the Kotlin language, so we could get rid of one 3rd party dependency and we would enjoy the use of <strong class="markup--strong markup--p-strong">named arguments</strong>, which replaces the need of a builder, the possibility to have <strong class="markup--strong markup--p-strong">default arguments</strong> and the lack of having to implement toString, copy, equals, etc.</p><p name="3de0" id="3de0" class="graf graf--p graf-after--p">This is what a class with AutoValue looks like:</p><figure name="df0c" id="df0c" class="graf graf--figure graf--iframe graf-after--p"><script src="https://gist.github.com/miquelbeltran/6e7c4116718009f8ed7f2447e607dc05.js"></script></figure><p name="7227" id="7227" class="graf graf--p graf-after--figure">And this is the equivalent with Kotlin data class:</p><figure name="8707" id="8707" class="graf graf--figure graf--iframe graf-after--p"><script src="https://gist.github.com/miquelbeltran/aed9bf1fa8ea26c5fe3178fe0996ae1b.js"></script></figure><h4 name="5a6c" id="5a6c" class="graf graf--h4 graf-after--figure">Dealing with Parcelable</h4><p name="b6b3" id="b6b3" class="graf graf--p graf-after--h4">This was the first roadblock for a smooth migration. Since we used auto-value-parcel for the Parcelable implementation, I had to look for an alternative. After checking alternatives <a href="http://grandstaish.github.io/paperparcel/" data-href="http://grandstaish.github.io/paperparcel/" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"><strong class="markup--strong markup--p-strong">PaperParcel</strong></a><strong class="markup--strong markup--p-strong"> was the winner</strong> with its built in Kotlin support.</p><p name="cd74" id="cd74" class="graf graf--p graf-after--p">The ‚Äúonly‚Äù issue we had, is that <strong class="markup--strong markup--p-strong">kotlin-kapt (a plugin for annotation processing on Kotlin) conflicted with the Java AutoValue annotated classes</strong>. I could have tried to fix that or just go ahead and migrate all the AutoValue classes at once. I decided for the latter.</p><p name="81ea" id="81ea" class="graf graf--p graf-after--p">So I spend a couple of days migrating all the AutoValue classes to Kotlin before I could even build the project and run a single Unit Test.</p><h4 name="f0fa" id="f0fa" class="graf graf--h4 graf-after--p">Missing builders</h4><p name="1c67" id="1c67" class="graf graf--p graf-after--h4">The second big issue was how the builders were used in our code. On Kotlin classes it was easy to replace the AutoValue builder with calls to the constructor with named parameters, but on Java classes it was a horror.</p><p name="8f1e" id="8f1e" class="graf graf--p graf-after--p">In Java we had to call to the constructor of the data class passing all parameters (including the ones with default values).</p><p name="eb77" id="eb77" class="graf graf--p graf-after--p">This is an example of what I mean:</p><pre name="bfa1" id="bfa1" class="graf graf--pre graf-after--p">// Kotlin<br>val value = MyValue(42)</pre><pre name="8bbb" id="8bbb" class="graf graf--pre graf-after--pre">// alternatively with named params<br>val value = MyValue(id = 42, title = &quot;Title&quot;)</pre><pre name="faad" id="faad" class="graf graf--pre graf-after--pre">// Java to Kotlin data class<br>MyValue value = new MyValue(42, &quot;&quot;, 0, false);</pre><pre name="7da3" id="7da3" class="graf graf--pre graf-after--pre">// Java to AutoValue builder<br>MyValue value = MyValue.builder().setId(42).build();</pre><p name="849a" id="849a" class="graf graf--p graf-after--pre">(the problem just goes bigger the more properties you have)</p><p name="b67b" id="b67b" class="graf graf--p graf-after--p">The solution, in some cases, has been migrating the calling class to Kotlin as well. I did this for most of the Unit Tests.</p><p name="4eba" id="4eba" class="graf graf--p graf-after--p">But on other cases I didn‚Äôt want to spend time migrating the Java code to Kotlin so I had to go with the ugly big constructor call.</p><h4 name="93c4" id="93c4" class="graf graf--h4 graf-after--p">Accessing to the data class properties</h4><p name="9c00" id="9c00" class="graf graf--p graf-after--h4">This worked flawlessly. Because the data class properties are exposed like getters to Java, there was no need to change any of the Java code!</p><pre name="bb16" id="bb16" class="graf graf--pre graf-after--p">// On Java, this works just as before the refactor<br>int id = myValue.getId();</pre><pre name="57cb" id="57cb" class="graf graf--pre graf-after--pre">// On Kotlin, this works just as before the refactor<br>val id = myValue.id</pre><h4 name="bc32" id="bc32" class="graf graf--h4 graf--startsWithDoubleQuote graf-after--pre">‚Äúcopy‚Äù instead of¬†‚Äúwith‚Äù</h4><p name="08f8" id="08f8" class="graf graf--p graf-after--h4">In AutoValue there‚Äôs a neat plugin called auto-value-with, which allows you do the following:</p><pre name="d07d" id="d07d" class="graf graf--pre graf-after--p">MyValue newValue = oldValue.withTitle(&quot;New Title&quot;);</pre><p name="0e81" id="0e81" class="graf graf--p graf-after--pre">The alternative in Kotlin also comes out-of-the-box!</p><pre name="0326" id="0326" class="graf graf--pre graf-after--p">val newValue = oldValue.copy(title = &quot;New Title&quot;)</pre><p name="90c4" id="90c4" class="graf graf--p graf-after--pre">No need to use a library and no need to declare the withTitle method.</p><p name="91e8" id="91e8" class="graf graf--p graf-after--p">Just be aware: this is only possible when calling from Kotlin.</p><h4 name="74e2" id="74e2" class="graf graf--h4 graf-after--p">‚Ä¶and they lived happily ever¬†after</h4><p name="0a5f" id="0a5f" class="graf graf--p graf-after--h4">The work was done, took less than expected, and helped us migrate a big chunk of our codebase to Kotlin. This refactor changed 250 files. üò®</p><p name="b1d7" id="b1d7" class="graf graf--p graf-after--p">Thankfully we had a good safety net of Unit and Espresso tests.</p><p name="5804" id="5804" class="graf graf--p graf-after--p">Thanks to this change, one of our project modules is now 100% Kotlin, we got rid of some 3rd party dependencies, although we had to add a new one.</p><p name="4c50" id="4c50" class="graf graf--p graf-after--p">We are also now enjoying null safety checking on compilation time rather than on run time.</p><p name="dada" id="dada" class="graf graf--p graf-after--p">I thought I would miss the builder pattern, but that was just on Java classes. Using our new data model from Kotlin is a breeze.</p><h4 name="494a" id="494a" class="graf graf--h4 graf-after--p">In Short</h4><ul class="postList"><li name="1355" id="1355" class="graf graf--li graf-after--h4">Kotlin data classes provide everything you need to replace AutoValue</li><li name="a2e8" id="a2e8" class="graf graf--li graf-after--li">Parcelables can be easily implemented using PaperParcel</li><li name="b8ff" id="b8ff" class="graf graf--li graf-after--li">The biggest problem was be the lack of builder pattern when calling from Java</li><li name="ef2c" id="ef2c" class="graf graf--li graf-after--li">Accessors to the properties won‚Äôt need to be changed</li><li name="368c" id="368c" class="graf graf--li graf-after--li">The conflict of kotlin-kapt with AutoValue obliged me to migrate all classes at once, proceed with care!</li><li name="ebaa" id="ebaa" class="graf graf--li graf-after--li graf--trailing">The copy data class method is a great replacement to auto-value-with</li></ul> 
