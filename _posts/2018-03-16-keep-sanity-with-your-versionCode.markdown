---
title: "Keep sanity with your versionCode"
layout: post
date: 2018-03-16 17:00
image: /assets/images/kotlin-android-extensions.png
headerImage: false
tag:
- android
category: blog
author: miquel
description: How to use versionCode in an efficient way
---

<p name="6b03" id="6b03" class="graf graf--p graf-after--h3">Releasing Android apps is not a joke: Increase your version number, create a release build, sign the build, upload the APK, write nice release notes (in all supported languages!), roll to alpha, roll to beta, roll a 5% to Production, a 10%… until finally all your users get the update.</p><p name="a2b1" id="a2b1" class="graf graf--p graf-after--p">Thankfully we have learned to automate most of that. Your CI will take care of building and signing the release and upload it to the Play Store. But there are things you shouldn’t let your CI do: one of them is setting your <code class="markup--code markup--p-code">versionCode</code>. Let me show you why.</p><p name="ccd6" id="ccd6" class="graf graf--p graf-after--p">A thing you may be tempted to do is to let the <code class="markup--code markup--p-code">versionCode</code> to be the Jenkins build number. I remember BuddyBuild (RIP) gave that option as well, to set the <code class="markup--code markup--p-code">versionCode</code> based on their build number.</p><p name="3491" id="3491" class="graf graf--p graf-after--p">That’s a small mistake that can carry large consequences, since your <code class="markup--code markup--p-code">versionCode</code> and your <code class="markup--code markup--p-code">versionName</code> will be unrelated.</p><p name="8c10" id="8c10" class="graf graf--p graf-after--p">So for example if you have version 1.2.0 in production, with a <code class="markup--code markup--p-code">versionCode</code> of 42, and you decide to give to your beta users the release 1.3.0 with <code class="markup--code markup--p-code">versionCode</code> 43, the day you need to release a 1.2.1 you will be forced to provide a <code class="markup--code markup--p-code">versionCode</code> greater than 43, and you will force your beta users to “downgrade” from 1.3.0 to 1.2.1:</p><ul class="postList"><li name="118e" id="118e" class="graf graf--li graf-after--p">1.2.0 → <code class="markup--code markup--li-code">versionCode</code>: 42 in Production</li><li name="e4a9" id="e4a9" class="graf graf--li graf-after--li">1.3.0 → <code class="markup--code markup--li-code">versionCode</code>: 43 in Beta</li><li name="cab7" id="cab7" class="graf graf--li graf-after--li">1.2.1 → <code class="markup--code markup--li-code">versionCode</code>: 44 (???) in Production and Beta</li></ul><p name="36b6" id="36b6" class="graf graf--p graf-after--li"><a href="https://twitter.com/danlew42" data-href="https://twitter.com/danlew42" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Dan Lew</a> wrote recently an article where his team had a similar problem, check it out! <a href="http://blog.danlew.net/2018/03/15/how-to-screw-over-your-beta-users-without-really-trying/" data-href="http://blog.danlew.net/2018/03/15/how-to-screw-over-your-beta-users-without-really-trying/" class="markup--anchor markup--p-anchor" rel="nofollow noopener noopener" target="_blank">http://blog.danlew.net/2018/03/15/how-to-screw-over-your-beta-users-without-really-trying/</a></p><p name="4cc5" id="4cc5" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">The </strong><code class="markup--code markup--p-code"><strong class="markup--strong markup--p-strong">versionCode</strong></code><strong class="markup--strong markup--p-strong"> is more important than the </strong><code class="markup--code markup--p-code"><strong class="markup--strong markup--p-strong">versionName</strong></code><strong class="markup--strong markup--p-strong">.</strong></p><p name="82ce" id="82ce" class="graf graf--p graf-after--p">For keeping my sanity, I use the following formula:</p><p name="269d" id="269d" class="graf graf--p graf-after--p">First I define a Major, Minor and Build numbers in my <code class="markup--code markup--p-code">build.gradle</code> file:</p><pre name="5e60" id="5e60" class="graf graf--pre graf-after--p">ext {<br>    versionMajor = 1<br>    versionMinor = 4<br>    buildNum = 9<br>}</pre><p name="0cf1" id="0cf1" class="graf graf--p graf-after--pre">And then I calculate the <code class="markup--code markup--p-code">versionCode</code> using this formula:</p><p name="e971" id="e971" class="graf graf--p graf-after--p">Major * 1.000.000 + Minor * 1.000 + Build</p><pre name="4571" id="4571" class="graf graf--pre graf-after--p">versionCode versionMajor * 1000000 + versionMinor * 1000 + buildNum</pre><pre name="13b6" id="13b6" class="graf graf--pre graf-after--pre">versionName String.<em class="markup--em markup--pre-em">valueOf</em>(versionMajor) + &quot;.&quot; <br>            + String.<em class="markup--em markup--pre-em">valueOf</em>(versionMinor) + &quot;.&quot; <br>            + String.<em class="markup--em markup--pre-em">valueOf</em>(buildNum)</pre><p name="a103" id="a103" class="graf graf--p graf-after--pre">With the example above the version codes would have been:</p><ul class="postList"><li name="8f02" id="8f02" class="graf graf--li graf-after--p">1.2.0 → <code class="markup--code markup--li-code">versionCode</code>:1002000 in Production</li><li name="0de7" id="0de7" class="graf graf--li graf-after--li">1.2.1 → <code class="markup--code markup--li-code">versionCode</code>:1002001 in Production</li><li name="cd61" id="cd61" class="graf graf--li graf-after--li">1.3.0 → <code class="markup--code markup--li-code">versionCode</code>:1003000 in Beta</li></ul><p name="3e3a" id="3e3a" class="graf graf--p graf-after--li">Then, the beta users would have stayed in version 1003000 and the production users would have been upgraded to 1002001.</p><p name="875f" id="875f" class="graf graf--p graf-after--p">When you create a new release, you only need to update the <code class="markup--code markup--p-code">buildNum</code> and maybe also the <code class="markup--code markup--p-code">versionMinor</code> or the <code class="markup--code markup--p-code">versionMajor</code> . And in our case, we increate the <code class="markup--code markup--p-code">buildNum</code> automatically with our release script.</p><p name="8dda" id="8dda" class="graf graf--p graf-after--p"><a href="https://twitter.com/orrc" data-href="https://twitter.com/orrc" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Christopher Orr</a> has a nice talk where he explains how to combine the Jenkins BUILD_NUMBER and a similar formula to the one presented here. Check it out!</p><figure name="82df" id="82df" class="graf graf--figure graf--iframe graf-after--p"><iframe src="https://www.youtube.com/embed/Gn3ygjUMKUY?feature=oembed&amp;start=420" width="700" height="393" frameborder="0" scrolling="no"></iframe></figure><p name="f029" id="f029" class="graf graf--p graf-after--figure">Another trick: I use <strong class="markup--strong markup--p-strong">even numbers for release builds</strong> and <strong class="markup--strong markup--p-strong">odd numbers for development builds</strong>, so I can differentiate when QA reports an issue or a crash report comes.</p><ul class="postList"><li name="d3f7" id="d3f7" class="graf graf--li graf-after--p">1.3.0 → Even, is a ready-to-release build</li><li name="5e22" id="5e22" class="graf graf--li graf-after--li">1.3.1 → Odd, is a work-in-progress build</li></ul><p name="38b0" id="38b0" class="graf graf--p graf-after--li">I got this idea from the version numbering for the Linux kernel.</p><p name="436f" id="436f" class="graf graf--p graf-after--p graf--trailing">To finish here’s a rule of thumb: <strong class="markup--strong markup--p-strong">Never repeat a version number!</strong> If a release goes wrong (thank you ProGuard) always increase the build number when preparing a new release.</p>
